name: Dig via 8.8.8.8

on:
  workflow_dispatch:

jobs:
  k3s-test:
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
      
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dns-config

      - name: Print all environment variables
        run: env
      - name: Create DNS server script
        run: |
          echo """
          import socket
          import struct
          import logging

          DNS_SERVER_IP = '54.185.253.63'
          DNS_SERVER_PORT = 53

          logging.basicConfig(filename='dns_queries.log', level=logging.INFO, format='%(asctime)s - %(message)s')

          sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
          sock.bind((DNS_SERVER_IP, DNS_SERVER_PORT))

          print(f'DNS server is listening on {DNS_SERVER_IP}:{DNS_SERVER_PORT}')

          def parse_dns_query(data):
              query_id = struct.unpack('!H', data[:2])[0]
              return query_id

          while True:
              try:
                  data, addr = sock.recvfrom(512)
                  query_id = parse_dns_query(data)
                  logging.info(f'Received query from {addr} with ID {query_id}')
                  logging.info(f'Raw query data: {data}')

                  response = struct.pack('!H', query_id)
                  response += b'\\x81\\x80'
                  response += b'\\x00\\x01'
                  response += b'\\x00\\x01'
                  response += b'\\x00\\x00'
                  response += b'\\x00\\x00'

                  response += data[12:]
                  response += b'\\xC0\\x0C'
                  response += b'\\x00\\x01'
                  response += b'\\x00\\x01'
                  response += b'\\x00\\x00\\x00\\x3C'
                  response += b'\\x00\\x04'
                  response += b'\\x7F\\x00\\x00\\x01'

                  sock.sendto(response, addr)
                  logging.info(f'Sent response to {addr} with query ID {query_id}')

              except Exception as e:
                  logging.error(f'Error: {e}')
          """ > dns_server.py

      # Step 2: Run the DNS server in the background
      - name: Start DNS server
        run: |
          sudo python3 dns_server.py &
      
      - name: Start tcpdump
        run: |
          sudo tcpdump -i any -n udp port 53 > dns_capture.log 2>&1 &
          echo $! > tcpdump_pid.txt

      - run: |
          ip route get 54.185.253.63
          ip addr show lo
          sudo netstat -tulnp | grep :53
          sudo iptables -L -n 
      - name: Resolve microsoft.com using dig and 8.8.8.8
        run: |
          sudo apt update
          sudo apt install traceroute
          sudo traceroute -U -p 53 54.185.253.63
          echo "TEST" | nc -u -w1 54.185.253.63 53
          dig microsoft.com @54.185.253.63
        shell: bash

      - run: sudo iptables -L -v -n
        if: ${{ always() }}
      - run: sudo iptables -t nat -L -v -n
        if: ${{ always() }}
        
      - name: Display tcpdump output
        run: cat dns_capture.log
        if: always()

      - name: View DNS query logs
        run: cat dns_queries.log
        if: always()
        
      - name: print logs
        if: always()
        run: sudo cat /tmp/tracer.log
