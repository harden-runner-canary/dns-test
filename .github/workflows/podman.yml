name: Build Container with Podman

on:
  workflow_dispatch:

jobs:
  build-block:
    runs-on: ubuntu-24.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block
          allowed-endpoints: >
            auth.docker.io:443
            deb.debian.org:80
            github.com:443
            production.cloudflare.docker.com:443
            registry-1.docker.io:443
            registry.npmjs.org:443
      
      
         
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dns-config
      
      - name: Create package.json
        run: |
          echo "Creating package.json..."
          cat <<EOF > package.json
          {
            "name": "my-app",
            "version": "1.0.0",
            "description": "A simple Node.js app",
            "main": "index.js",
            "scripts": {
              "start": "node index.js"
            },
            "dependencies": {
              "express": "^4.17.1",
              "dotenv": "^10.0.0",
              "cors": "^2.8.5",
              "mongoose": "^6.0.12",
              "morgan": "^1.10.0"
            },
            "author": "Your Name",
            "license": "ISC"
          }
          EOF

      - name: Create Dockerfile
        run: |
          echo "Creating Dockerfile..."
          cat <<EOF > Dockerfile
          # Use an official Node.js runtime as the base image
          FROM node:18-alpine
          RUN cat /etc/resolv.conf
          # Set the working directory in the container
          WORKDIR /app

          # Copy the package.json and package-lock.json if available
          COPY package*.json ./

          # Install the dependencies
          RUN npm install

          # Copy the rest of the application code
          COPY . .

          # Expose the port the app runs on
          EXPOSE 3000

          # Command to run the application
          CMD ["npm", "start"]
          EOF

      
      - run: podman --version
      - name: Build Container Image with Podman
        run: |
          podman build --log-level=debug -t my-app:latest .
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit
          allowed-endpoints: >
            auth.docker.io:443
            deb.debian.org:80
            github.com:443
            production.cloudflare.docker.com:443
            registry-1.docker.io:443
      
              
      - uses: actions/checkout@v3
      - uses: ./.github/actions/dns-config
      
      - name: Create package.json
        run: |
          echo "Creating package.json..."
          cat <<EOF > package.json
          {
            "name": "my-app",
            "version": "1.0.0",
            "description": "A simple Node.js app",
            "main": "index.js",
            "scripts": {
              "start": "node index.js"
            },
            "dependencies": {
              "express": "^4.17.1",
              "dotenv": "^10.0.0",
              "cors": "^2.8.5",
              "mongoose": "^6.0.12",
              "morgan": "^1.10.0"
            },
            "author": "Your Name",
            "license": "ISC"
          }
          EOF

      - name: Create Dockerfile
        run: |
          echo "Creating Dockerfile..."
          cat <<EOF > Dockerfile
          # Use an official Node.js runtime as the base image
          FROM node:18-alpine
          RUN cat /etc/resolv.conf
          # Set the working directory in the container
          WORKDIR /app

          # Copy the package.json and package-lock.json if available
          COPY package*.json ./

          # Install the dependencies
          RUN npm install

          # Copy the rest of the application code
          COPY . .

          # Expose the port the app runs on
          EXPOSE 3000

          # Command to run the application
          CMD ["npm", "start"]
          EOF

     
      - run: podman --version

      

      - run: cat /run/systemd/resolve/stub-resolv.conf
      
      - name: Build Container Image with Podman
        run: |
          podman build --log-level=debug -t my-app:latest .
