name: Test setup-minikube with harden-runner

on:
  workflow_dispatch: # run test job only
  
permissions:
  contents: read

jobs:
  test-with-harden-runner:
    runs-on: ubuntu-latest

    steps:      
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          #disable-sudo: true
          egress-policy: audit

      - name: Remove DNS servers from Docker daemon.json and restart Docker
        run: |
          echo "Modifying /etc/docker/daemon.json to remove DNS servers..."
          
          # Check if the daemon.json file exists
          if [ -f /etc/docker/daemon.json ]; then
            # Remove the DNS entry from the file
            sudo jq 'del(.dns)' /etc/docker/daemon.json | sudo tee /etc/docker/daemon.json.tmp > /dev/null
            
            # Move the modified file back to the original location
            sudo mv /etc/docker/daemon.json.tmp /etc/docker/daemon.json
      
            echo "DNS servers removed from /etc/docker/daemon.json."
            cat /etc/docker/daemon.json
          else
            echo "File /etc/docker/daemon.json does not exist. Skipping modification."
          fi
          
          # Restart Docker to apply changes
          echo "Restarting Docker service..."
          sudo systemctl restart docker
          echo "Docker service restarted."

      - name: Update Netplan Configuration File Using sed
        run: |
          echo "Updating Netplan Configuration File with sed..."
          # Disable interface DNS
          sudo sed -i '/route-metric: 100/a\        use-dns: false' /etc/netplan/50-cloud-init.yaml
          # Add custom DNS servers
          sudo sed -i '/set-name: "eth0"/a\      nameservers:\n        addresses: [172.17.0.1]' /etc/netplan/50-cloud-init.yaml
          echo "Updated Netplan Configuration File:"
          sudo cat /etc/netplan/50-cloud-init.yaml
          # Apply netplan changes
          sudo netplan apply

      - name: Print Netplan Configuration Files
        run: |
          echo "Netplan Configuration Files:"
          for file in /etc/netplan/*.yaml; do
            echo "File: $file"
            sudo cat "$file"
          done

      - name: Disable Stub Resolver, Set Custom DNS Servers, and Remove Existing Nameservers
        run: |
          echo "Disabling Stub Resolver, Setting Custom DNS Servers, and Removing Existing Nameservers..."
          # Disable DNSStubListener
          sudo sed -i 's/^#DNSStubListener=.*/DNSStubListener=no/' /etc/systemd/resolved.conf
          if ! grep -q '^DNSStubListener=' /etc/systemd/resolved.conf; then
            echo 'DNSStubListener=no' | sudo tee -a /etc/systemd/resolved.conf
          fi
          
          # Remove any existing nameservers
          sudo sed -i '/^DNS=/d' /etc/systemd/resolved.conf
          
          # Add custom DNS servers
          #echo 'DNS=127.0.0.1 172.17.0.1' | sudo tee -a /etc/systemd/resolved.conf
          
          # Restart systemd-resolved to apply changes
          sudo systemctl restart systemd-resolved
          
          # Update /etc/resolv.conf symbolic link
          sudo rm /etc/resolv.conf
          sudo ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf
          
          # Verify the changes
          echo "Current /etc/resolv.conf:"
          cat /etc/resolv.conf
          
          echo "systemd-resolved status:"
          systemctl status systemd-resolved
          sudo systemctl restart docker
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # 3.3.0

      - name: Start minikube
        uses: medyagh/setup-minikube@317d92317e473a10540357f1f4b2878b80ee7b95 # 0.0.16
      
      - name: Deploy cert-manager to minikube
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.14.5 --set installCRDs=true
          echo "waiting for cert-manager pods to be ready..."
          sleep 5
          kubectl wait --for=condition=Ready -n cert-manager --all pods --timeout=60s

  
